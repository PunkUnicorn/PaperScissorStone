@model PaperScissorStone1.Models.LobbyViewModel
@{
    ViewBag.Title = "View";
}

<style>
    challenge_button {} /* used to lock out challenge buttons */
</style>

<div class="row">
    <div class="col-md-12">
        <h2>Lobby</h2>
        <ul id="playerList">
            @foreach (var p in Model.Players)
            {
                if (p.Id != Model.Id)
                {
                    var htmlPlayerId = string.Format("Pl{0}", p.Id);
                    var htmlIssueChallengeId = string.Format("Ic{0}", p.Id);
                    <li id="@htmlPlayerId">
                        @* there are two places this button is created (1 if 2) *@
                        @p.Name <button id="@htmlIssueChallengeId" class="btn challenge_button" onclick="onclickChallenge(@p.Id)">Challenge!</button>
                    </li>
                }
            }
        </ul>
    </div>

    <div class="col-md-12">
        <div id="challengers">

        </div>
    </div>

    <div class="col-md-12">
        <h2>Chat</h2>
        <div class="container">
            <input type="text" id="message" />
            <br />
            <input class="btn unstyled" type="button" id="sendmessage" value="Send" />
            <ul id="discussion"></ul>
        </div>
    </div>
    @Html.ActionLink("Arena", "Index", "Arena", null, new { id = "arenaLink", @class="hidden" })
</div>
@section scripts {
    <script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <script src="~/signalr/hubs"></script>

    <!-- From the classic SignalR tutorial: chat page and send messages.-->
    <script>
        var lobbyUpdate = null;

        $(document).ready(function () {
            lobbyUpdate = $.connection.lobbyHub;

            lobbyUpdate.client.addPlayer = function (id, name) {
                if (id !== @Model.Id && $('#playerList > #'+ makeHtmlPlayerId(id)).length === 0)
                    $('#playerList').append(makeListItem(id, name));
            };
            lobbyUpdate.client.removePlayer = function (id) {
                $('li#' + makeHtmlPlayerId(id)).remove();
            };
            lobbyUpdate.client.newMessage = function (name, message) {
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };
            lobbyUpdate.client.inviteChallenge = function(challengeById, challengeByName) {
                console.log($('#' + makeHtmlIssueChallengeId(challengeById).length));
                $('#' + makeHtmlIssueChallengeId(challengeById)).prop('disabled', true); //disable ability to challenge the challenger
                var acceptBtn = makeChallengeAcceptBtn(challengeById, challengeByName);
                $('#playerList > #'+makeHtmlPlayerId(challengeById)).append(acceptBtn);
            };
            lobbyUpdate.client.challengeCancelled = function(challengeById) {
                $('#' + makeHtmlIssueChallengeId(challengeById)).prop('disabled', false); //re-eneable challenge
                $('#'+makeHtmlPlayerId(challengeById)+' > #' + makeHtmlAcceptFromId(challengeById)).remove();
            };
            lobbyUpdate.client.challengeRejected = function(theirId) {
                cancelledChallenge(theirId);
            };
            lobbyUpdate.client.arenaRedirect = function(gameId, challengeById, acceptedById) {
                var link = $('#arenaLink').prop('href');
                window.location.href = link + '?GameId=' + gameId + '&Id=' + @Model.Id;
            };
            $.connection.hub.start().done(function () {
                // add ourselves to the lobby
                lobbyUpdate.server.addPlayer(@Model.Id, '@Model.Name');

                // auto remove ourselves from the lobby
                window.onbeforeunload = function (e) {
                    lobbyUpdate.server.removePlayer(@Model.Id);
                };

                $('#sendmessage').click(function () {
                    lobbyUpdate.server.send('@Model.Name', $('#message').val());
                    $('#message').val('').focus();
                });
            });
        });

        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

        function makeHtmlPlayerId(id) {
            return 'Pl' + id.toString();
        }

        function makeHtmlAcceptFromId(id) {
            return 'Cb' + id.toString();
        }

        function makeHtmlIssueChallengeId(id) {
            return 'Ic' + id.toString();
        }

        function makeChallengeAcceptBtn(challengeById, challengeByName) {
            return '<button id="'+ makeHtmlAcceptFromId(challengeById) +'" class="btn challenge_button animated rubberBand" onclick="onclickAcceptChallenge('+challengeById+')">Accept challenge by ' + challengeByName + '</button>';
        }

        function makeListItem(id, name) {
            var htmlPlayerId = makeHtmlPlayerId(id);
            var htmlLi = '<li id="' + htmlPlayerId + '">' +
                htmlEncode(name) +
                /* there are two places this button is created (2 of 2) */
                ' <button id="'+ makeHtmlIssueChallengeId(id) +'" class="btn challenge_button" onclick="onclickChallenge(' + id + ')">Challenge!</button>' +
                '</li>';

            return htmlLi;
        }

        function makeCancelChallengeButton(theirId) {
            return '<button id="cancelChallenge" class="btn animated rubberBand" onclick="onclickCancelChallenge('+theirId+')">Cancel challenge</button>';
        }

        function onclickChallenge(theirId) {
            lobbyUpdate.server.inviteChallenge(@Model.Id, '@Model.Name', theirId);
            $('#challengers').append(makeCancelChallengeButton(theirId));
            $('.challenge_button').prop('disabled', true);
        }

        function cancelledChallenge(theirId) {
            $('#' + makeHtmlIssueChallengeId(theirId)).prop('disabled', false); //re-enable ability to challenge the challenger
            $('#cancelChallenge').remove();
        }
        function onclickCancelChallenge(theirId) {
            lobbyUpdate.server.cancelChallenge(@Model.Id, '@Model.Name', theirId);
            cancelledChallenge(theirId);
        }

        function onclickAcceptChallenge(challengeById) {
            lobbyUpdate.server.initArena(challengeById, @Model.Id);
            console.log('challenge from ' + challengeById + 'accepted ');
        }
    </script>
}
